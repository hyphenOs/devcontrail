diff --git a/third_party/hiredis-boostasio-adapter/boostasio.cpp b/third_party/hiredis-boostasio-adapter/boostasio.cpp
index 2be99ad..b123fb5 100644
--- a/third_party/hiredis-boostasio-adapter/boostasio.cpp
+++ b/third_party/hiredis-boostasio-adapter/boostasio.cpp
@@ -1,8 +1,11 @@
 #include "boostasio.hpp"
 
+#include <tbb/mutex.h>
 
-redisBoostClient::redisBoostClient(boost::asio::io_service& io_service,redisAsyncContext *ac)
-: socket_(io_service)
+
+redisBoostClient::redisBoostClient(boost::asio::io_service& io_service,
+        redisAsyncContext *ac, tbb::mutex& mtex)
+: socket_(io_service), mtex_(mtex), read_requested_(false), write_requested_(false), read_in_progress_(false), write_in_progress_(false), cleanup_(false)
 {
 
 	/*this gives us access to c->fd*/
@@ -39,18 +42,21 @@ void redisBoostClient::operate()
 	if(read_requested_ && !read_in_progress_) {
 		read_in_progress_ = true;
 		socket_.async_read_some(boost::asio::null_buffers(),
-                       	boost::bind(&redisBoostClient::handle_read,this,boost::asio::placeholders::error));
+                       	boost::bind(&redisBoostClient::handle_read,shared_from_this(),boost::asio::placeholders::error));
 	}
 
 	if(write_requested_ && !write_in_progress_) {
 		write_in_progress_ = true;
 		socket_.async_write_some(boost::asio::null_buffers(),
-                       	boost::bind(&redisBoostClient::handle_write,this,boost::asio::placeholders::error));
+                       	boost::bind(&redisBoostClient::handle_write,shared_from_this(),boost::asio::placeholders::error));
 	}
 }
 	
 void redisBoostClient::handle_read(boost::system::error_code ec)
 {
+        if (cleanup_) return;
+
+        tbb::mutex::scoped_lock lock(mtex_);
 	read_in_progress_ = false;
 	if(!ec) {
 		redisAsyncHandleRead(context_);
@@ -62,6 +68,9 @@ void redisBoostClient::handle_read(boost::system::error_code ec)
 
 void redisBoostClient::handle_write(boost::system::error_code ec)
 {
+        if (cleanup_) return;
+
+        tbb::mutex::scoped_lock lock(mtex_);
 	write_in_progress_ = false;
 	if(!ec) {
 		redisAsyncHandleWrite(context_);
@@ -96,7 +105,11 @@ void redisBoostClient::del_write(void *privdata)
 void redisBoostClient::cleanup(void *privdata) 
 {
 	/*Do I even need this?*/
-	printf("cleanup called...\n");	
+        read_requested_ = false;
+        write_requested_ = false;
+        read_in_progress_ = false;
+        write_in_progress_ = false;
+        cleanup_ = true;
 }
 
 /*wrappers*/
diff --git a/third_party/hiredis-boostasio-adapter/boostasio.hpp b/third_party/hiredis-boostasio-adapter/boostasio.hpp
index c24140a..8ae5cc0 100644
--- a/third_party/hiredis-boostasio-adapter/boostasio.hpp
+++ b/third_party/hiredis-boostasio-adapter/boostasio.hpp
@@ -10,13 +10,18 @@
 
 #include <boost/asio.hpp>
 #include <boost/bind.hpp>
+#include <boost/enable_shared_from_this.hpp>
+
+#include <tbb/mutex.h>
 
 using boost::asio::ip::tcp;
 
-class redisBoostClient
+class redisBoostClient : public boost::enable_shared_from_this<redisBoostClient> 
 {
 public:
-        redisBoostClient(boost::asio::io_service& io_service,redisAsyncContext *ac);
+        redisBoostClient(boost::asio::io_service& io_service,
+                redisAsyncContext *ac,
+                tbb::mutex &mtex);
 
 	void operate();
 
@@ -29,12 +34,14 @@ public:
 	void cleanup(void *privdata);
 
 private:
-redisAsyncContext *context_;
 boost::asio::ip::tcp::socket socket_;
+tbb::mutex &mtex_;
+redisAsyncContext *context_;
 bool read_requested_;
 bool write_requested_;
 bool read_in_progress_;
 bool write_in_progress_;
+bool cleanup_;
 };
 
 
